LED
********

.. 2.GPIO（IO板，彩色LED阵列，蜂鸣器）
  2.1.LED：讲解二极管、LED，电位器，外置电源，万用表测量
  2.2.焊接的方法（这里都采用插件式，减少难度）
  2.3.Python控制LED
  2.4.循环语句
  2.5.数组，实现多个IO跑马灯
  2.6.三极管MOS管
  2.7.二维数组，扫描LED阵列8x8或16x16
  2.8.继电器
  2.9.按键，中断，函数
  2.10.综合实验，按键与贪食蛇

点亮一个LED
==============

焊接
------

.. note:: 可以跳过

* 用万用表测试LED，单向导电性
* LED1焊接上去，一个电阻R1，通电就先亮一个（电源指示灯）
* IO点亮LED2
* 一个电位器，万用表测量阻值
* 再LED3，变亮度，电流测试点可以短路（跳线？）
* 测试电压、电流（限流电阻的分压）；测试点

LED两端留一个IO，未来给ADC用


Python语言：控制LED
---------------------
四个都亮

C语言：控制LED
-----------------

焊接
------
LED3和LED4焊接练习

跑马灯
=========
实验现象
---------

跑马灯效果如下图

.. image:: ../picture/led.png

.. todo::

  换一个gif，或者小视频


编程学习
^^^^^^^^^
打开main.py文件开始编写代码:
导入头文件:

 ::

    import pyb

之后开始实例化LED灯，使用pyb文件中的LED类来对LED灯进行实例化，在定义时，其定义函数依次为LED（1）、LED（2）、LED（3）、LED（4）。
在这里，我们使用元组的形式来对LED灯进行定义，代码为：

 ::

    leds = [pyb.LED(i) for i in range(1,5)]

设置完毕后，即可编写函数实现跑马灯，基本思想为：设置变量n，对变量n进行加一后模4运算，依据所得结果对LED灯组进行翻转操作，每个翻转操作后延时一定时间，达到跑马灯的效果。为了处理异常情况，我们在代码的外层添加了try…finally…语句。代码如下：

 ::

    n = 0

    try:
       while True:
          n = (n + 1) % 4
          leds[n].toggle()
          pyb.delay(50)
    finally:
        for l in leds:
            l.off()


